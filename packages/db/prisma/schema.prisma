generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ShapeType {
  RECTANGLE
  ELLIPSE
  PEN
  LINE
  LINE_WITH_ARROW
  DIAMOND
  TEXT
}

enum StrokeStyle {
  SOLID
  DASHED
  DOTTED
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  rooms     Room[]
  shapes    Shape[]
}

model Room {
  id        String   @id @default(uuid())
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  adminId   String
  admin     User     @relation(fields: [adminId], references: [id])
  shapes    Shape[]
}

model Shape {
  id        Int       @id @default(autoincrement())
  type      ShapeType
  userId    String
  roomId    String
  createdAt DateTime  @default(now())

  user          User           @relation(fields: [userId], references: [id])
  room          Room           @relation(fields: [roomId], references: [id])
  rectangle     Rectangle?
  ellipse       Ellipse?
  pen           Pen?
  line          Line?
  lineWithArrow LineWithArrow?
  diamond       Diamond?
  text          Text?
}

model Rectangle {
  id          Int         @id @default(autoincrement())
  shapeId     Int         @unique
  shape       Shape       @relation(fields: [shapeId], references: [id], onDelete: Cascade)
  x           Float
  y           Float
  width       Float
  height      Float
  color       String      @default("#ffffff")
  strokeWidth Float       @default(2)
  strokeStyle StrokeStyle @default(SOLID)
}

model Ellipse {
  id          Int         @id @default(autoincrement())
  shapeId     Int         @unique
  shape       Shape       @relation(fields: [shapeId], references: [id], onDelete: Cascade)
  centerX     Float
  centerY     Float
  radiusX     Float
  radiusY     Float
  color       String      @default("#ffffff")
  strokeWidth Float       @default(2)
  strokeStyle StrokeStyle @default(SOLID)
}

model Pen {
  id          Int         @id @default(autoincrement())
  shapeId     Int         @unique
  shape       Shape       @relation(fields: [shapeId], references: [id], onDelete: Cascade)
  points      Json
  color       String      @default("#ffffff")
  strokeWidth Float       @default(2)
  strokeStyle StrokeStyle @default(SOLID)
}

model Line {
  id      Int    @id @default(autoincrement())
  shapeId Int    @unique
  shape   Shape  @relation(fields: [shapeId], references: [id], onDelete: Cascade)
  startX  Float
  startY  Float
  endX    Float
  endY    Float
  color   String      @default("#ffffff")
  strokeWidth Float       @default(2)
  strokeStyle StrokeStyle @default(SOLID)
}

model LineWithArrow {
  id      Int    @id @default(autoincrement())
  shapeId Int    @unique
  shape   Shape  @relation(fields: [shapeId], references: [id], onDelete: Cascade)
  startX  Float
  startY  Float
  endX    Float
  endY    Float
  color   String @default("#ffffff")
  strokeWidth Float       @default(2)
  strokeStyle StrokeStyle @default(SOLID)
}

model Diamond {
  id      Int    @id @default(autoincrement())
  shapeId Int    @unique
  shape   Shape  @relation(fields: [shapeId], references: [id], onDelete: Cascade)
  centerX Float
  centerY Float
  width   Float
  height  Float
  color   String @default("#ffffff")
  strokeWidth Float       @default(2)
  strokeStyle StrokeStyle @default(SOLID)
}

model Text {
  id       Int    @id @default(autoincrement())
  shapeId  Int    @unique
  shape    Shape  @relation(fields: [shapeId], references: [id], onDelete: Cascade)
  x        Float
  y        Float
  content  String
  fontSize Float  @default(16)
  color    String @default("#ffffff")
}
